---
apiVersion: v1
kind: Namespace
metadata:
  name: inventory
  labels:
    app.kubernetes.io/managed-by: kubectl

# api deployment
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: data-protection-pv
  labels:
    app.kubernetes.io/name: api-dp-pv
    app.kubernetes.io/instance: api-dp-pv-1.0.0
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: pv
    app.kubernetes.io/managed-by: kubectl
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: local-storage
  local:
    path: /repositories/ssl
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - k8s-worker-node-1

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-protection-pvc
  namespace: inventory
  labels:
    app.kubernetes.io/name: api-dp-pvc
    app.kubernetes.io/instance: api-dp-pvc-1.0.0
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: pvc
    app.kubernetes.io/managed-by: kubectl
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: local-storage

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  namespace: inventory
  labels:
    app.kubernetes.io/name: api
    app.kubernetes.io/instance: api-1.0.0
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: web
    app.kubernetes.io/part-of: inventory
    app.kubernetes.io/managed-by: kubectl
spec:
  replicas: 1
  selector:
    matchLabels:
      role: api
  template:
    metadata:
      labels:
        role: api
    spec:
      containers:
        - name: api
          image: inventory/api:1.0.0
          ports:
            - containerPort: 8443
          resources:
            requests:
              cpu: "750m"
              memory: "1.5Gi"
            limits:
              cpu: "1.5"
              memory: "3Gi"
          readinessProbe:
            httpGet:
              path: /api/v1/health
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 10
            periodSeconds: 20
            timeoutSeconds: 30
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /api/v1/health
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 10
            periodSeconds: 20
            timeoutSeconds: 30
            failureThreshold: 3
          volumeMounts:
            - name: data-protection-keys
              mountPath: /app/DataProtection-Keys
            - name: data-protection-cert
              mountPath: /app/DataProtection-Cert
      volumes:
        - name: data-protection-keys
          emptyDir: {}
        - name: data-protection-cert
          persistentVolumeClaim:
            claimName: data-protection-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: api
  namespace: inventory
  labels:
    app.kubernetes.io/managed-by: kubectl
spec:
  selector:
    role: api
  type: NodePort
  ports:
    - port: 8443
      targetPort: 8443
      nodePort: 30001

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sql
  namespace: inventory
  labels:
    app.kubernetes.io/name: sql
    app.kubernetes.io/instance: sql-1.0.0
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: inventory
    app.kubernetes.io/managed-by: kubectl
spec:
  serviceName: sql
  replicas: 1
  selector:
    matchLabels:
      role: sql
  template:
    metadata:
      labels:
        role: sql
    spec:
      initContainers:
        - name: init-sql
          image: inventory/sql:1.0.0
          command:
            - sh
            - -c
            - |
              # Check if SQL Server process is running
              if ! pgrep -x "sqlservr" > /dev/null
              then
                  echo "SQL Server process is not running. Exiting."
                  pgrep -x "sqlservr"
                  exit 1
              fi
      containers:
        - name: sql
          image: inventory/sql:1.0.0
          ports:
            - containerPort: 1433
          resources:
            requests:
              cpu: "200m"
              memory: "500Mi"
            limits:
              cpu: "500m"
              memory: "1Gi"
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - |
                  # Check if SQL Server process is running
                  if ! pgrep -x "sqlservr" > /dev/null
                  then
                      echo "SQL Server process is not running. Exiting."
                      pgrep -x "sqlservr"
                      exit 1
                  fi
            initialDelaySeconds: 10
            periodSeconds: 20
            timeoutSeconds: 30
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - |
                  # Check if SQL Server process is running
                  if ! pgrep -x "sqlservr" > /dev/null
                  then
                      echo "SQL Server process is not running. Exiting."
                      pgrep -x "sqlservr"
                      exit 1
                  fi
            initialDelaySeconds: 10
            periodSeconds: 20
            timeoutSeconds: 30
            failureThreshold: 3

---
apiVersion: v1
kind: Service
metadata:
  name: sql
  namespace: inventory
  labels:
    app.kubernetes.io/managed-by: kubectl
spec:
  selector:
    role: sql
  ports:
    - port: 1433
      targetPort: 1433